{"version":3,"sources":["components/IssueTable.js","components/NavBar.js","components/AddIssueTextbox.js","components/AddIssue.js","components/ToastPop.js","App.js","reportWebVitals.js","index.js"],"names":["IssueTable","issueList","setAddIssueOpen","setAddOrUpdate","setEditInitVals","deleteIssue","issueData","sort","a","b","ACCOUNTNO","map","el","index","recordNo","RECORDNO","accountNo","title","TITLE","accountType","ACCOUNTTYPE","normalBalance","NORMALBALANCE","key","icon","onClick","editClick","deleteClick","useState","start","end","recordsRange","setRecordsRange","currentPage","setCurrentPage","id","isZebra","hasStickyHead","hasStickyFooter","footer","totalRecords","length","showPageSizeSelection","pageSize","onPagination","next","size","newPage","newPageSize","handlePagination","pageSizeSelectionOptions","name","slice","renderRows","NavBar","addIssueOpen","navigationType","display","flex","margin","menuType","height","AddIssueTextbox","text","fieldKey","required","editInitVals","addOrUpdate","label","readOnly","value","onChange","e","target","AddIssue","addIssue","useEffect","setErrorCount","errorCount","open","subtitle","stickyFooter","onSubmit","preventDefault","leftSideButtons","saveButton","buttonType","type","fieldSpacing","ToastPop","toastMessage","toastOpen","setToastOpen","toastVariant","variant","onDismiss","timeout","App","setIssueList","setToastVariant","setToastMessage","getIssues","console","log","fetch","response","json","data","formData","FormData","append","body","URLSearchParams","method","error","theme","mintTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1b4a0ae.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from \"react\"\r\nimport { FlatTable,FlatTableRow,FlatTableHead,FlatTableHeader,FlatTableBody,FlatTableCell } from \"carbon-react/lib/components/flat-table\"\r\nimport Pager from \"carbon-react/lib/components/pager\"\r\nimport { ActionPopover, ActionPopoverItem } from \"carbon-react/lib/components/action-popover\"\r\n\r\nconst IssueTable = ({ issueList, setAddIssueOpen, setAddOrUpdate, setEditInitVals, deleteIssue }) => {\r\n// TODO implment sorting? looks like a pain\r\n// TODO implement preview while data is loading?\r\n\r\n  // map through the elements returned by the getIssues method and create a table row for each one\r\n  const issueData = issueList.sort((a,b) => a.ACCOUNTNO-b.ACCOUNTNO).map((el, index) => {\r\n    // extract vars from array\r\n    const recordNo = el.RECORDNO\r\n    const accountNo = el.ACCOUNTNO\r\n    const title = el.TITLE\r\n    const accountType = el.ACCOUNTTYPE\r\n    const normalBalance = el.NORMALBALANCE\r\n\r\n    return (\r\n      <FlatTableRow key={index}>\r\n      <FlatTableCell>{accountNo}</FlatTableCell>\r\n      <FlatTableCell>{title}</FlatTableCell>\r\n      <FlatTableCell>{accountType}</FlatTableCell>\r\n      <FlatTableCell>{normalBalance}</FlatTableCell>\r\n      <FlatTableCell>\r\n        <ActionPopover>\r\n        <ActionPopoverItem \r\n          icon=\"edit\" \r\n          onClick={\r\n            () => editClick(recordNo,accountNo,title,accountType,normalBalance)}>\r\n                  Edit\r\n                </ActionPopoverItem>\r\n                <ActionPopoverItem \r\n                  icon=\"delete\" \r\n                  onClick={\r\n                    () => deleteClick(accountNo)}>\r\n                  Delete\r\n                </ActionPopoverItem>\r\n        </ActionPopover>\r\n      </FlatTableCell>\r\n    </FlatTableRow>\r\n    )\r\n  })\r\n\r\n  const editClick = (recordNo, accountNo, title, accountType, normalBalance) => {\r\n    // set the form type to update\r\n    setAddOrUpdate(\"Update\")\r\n\r\n    // set the init values for use in the add issue form\r\n    setEditInitVals({ recordNo, accountNo, title, accountType, normalBalance })\r\n\r\n    //launch form \r\n    setAddIssueOpen(true)\r\n  }\r\n\r\n  const deleteClick = (recordNo) => {\r\n    deleteIssue(recordNo)\r\n  }\r\n\r\n  const [recordsRange, setRecordsRange] = useState({ start: 0, end: 10 })\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n\r\n  const renderRows = () => {\r\n    const { start, end } = recordsRange\r\n    if (start < 0) return issueData\r\n    if (end> issueData.length) return issueData.slice(start, issueData.length)\r\n    return issueData.slice(start, end)\r\n  }\r\n\r\n  const handlePagination = (newPage, newPageSize) => {\r\n    const start = (newPage - 1) * newPageSize\r\n    const end = start + newPageSize\r\n    setRecordsRange({ start, end })\r\n    setCurrentPage(newPage)\r\n  }\r\n\r\n  const pageSizeOptions = [\r\n    { id: \"10\", name: 10 },\r\n    { id: \"25\", name: 25 }\r\n  ]\r\n\r\n\r\n  return (\r\n    <div id=\"issue-list\">\r\n      <FlatTable isZebra hasStickyHead hasStickyFooter footer = {\r\n          <Pager totalRecords={issueData.length} \r\n            showPageSizeSelection \r\n            pageSize={10}\r\n            currentPage={currentPage}\r\n            onPagination={(next, size) => handlePagination(next, size)}\r\n            pageSizeSelectionOptions={pageSizeOptions}\r\n            />\r\n        }\r\n      >\r\n        <FlatTableHead>\r\n          <FlatTableRow>\r\n            <FlatTableHeader>Account Number</FlatTableHeader>\r\n            <FlatTableHeader>Title</FlatTableHeader>\r\n            <FlatTableHeader>Account Type</FlatTableHeader>\r\n            <FlatTableHeader>Normal Balance</FlatTableHeader>\r\n            <FlatTableHeader />\r\n          </FlatTableRow>\r\n        </FlatTableHead>\r\n        <FlatTableBody>\r\n          {renderRows()}\r\n        </FlatTableBody>\r\n      </FlatTable>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IssueTable\r\n","import React from 'react'\r\nimport NavigationBar from \"carbon-react/lib/components/navigation-bar\"\r\nimport Box from \"carbon-react/lib/components/box\"\r\n//import VerticalDivider from \"carbon-react/lib/components/vertical-divider\";\r\n//import Icon from \"carbon-react/lib/components/icon\"\r\nimport {\r\n  Menu,\r\n  MenuItem,\r\n  //SubmenuBlock,\r\n  //MenuDivider,\r\n} from \"carbon-react/lib/components/menu\";\r\n\r\n// top navbar including the Issue Tracker title and the Add issue button\r\nconst NavBar = ({ addIssueOpen, setAddIssueOpen, setAddOrUpdate, setEditInitVals }) => {\r\n  return (\r\n    <NavigationBar id=\"nav-bar\" navigationType=\"dark\" >\r\n      <Box display=\"flex\" flex=\"1\" margin=\"0 auto\">\r\n        <Menu menuType=\"dark\" display=\"flex\" flex=\"1\">\r\n          <Box height=\"\" flex=\"1\">\r\n              General Ledger\r\n          </Box>\r\n          <MenuItem icon=\"add\" onClick={() => {\r\n              setAddIssueOpen(!addIssueOpen)\r\n              setEditInitVals({ // reset edit initial values to as not to pull through the values from the last edit\r\n                recordNo: \"\",\r\n                accountNo: \"\",\r\n                title: \"\",\r\n                accountType: \"\",\r\n                normalBalance: \"\"\r\n              })\r\n              setAddOrUpdate(\"Add\")\r\n              }}>\r\n            Add Account\r\n          </MenuItem>\r\n        </Menu>\r\n      </Box>\r\n    </NavigationBar>\r\n\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\nimport Textbox from \"carbon-react/lib/__experimental__/components/textbox\";\r\n\r\nconst AddIssueTextbox = ({ text, fieldKey, required, editInitVals, setEditInitVals, addOrUpdate }) => {\r\n\r\n  return (\r\n    <Textbox \r\n      size=\"small\" \r\n      required={required}\r\n      label={text}\r\n      readOnly={addOrUpdate == \"Update\" && fieldKey ==\"accountNo\"? true:false}\r\n      value={editInitVals[fieldKey]}\r\n      onChange={(e) => setEditInitVals({...editInitVals, [fieldKey]: e.target.value})}/>\r\n  )\r\n}\r\n\r\nexport default AddIssueTextbox\r\n\r\n//onChange={(e) => setField(e.target.value)}/>","import React from 'react';\r\nimport { useState, useEffect } from \"react\";\r\n//import Typography from \"carbon-react/lib/components/typography\"\r\nimport Form from \"carbon-react/lib/components/form\";\r\nimport Dialog from \"carbon-react/lib/components/dialog\";\r\n//import Textbox from \"carbon-react/lib/__experimental__/components/textbox\";\r\nimport Button from \"carbon-react/lib/components/button\";\r\nimport AddIssueTextbox from \"./AddIssueTextbox.js\";\r\nimport { Select, Option } from \"carbon-react/lib/components/select\";\r\n\r\n\r\n// add issue pop up dialog box, also used for update (depending on addOrUpdate)\r\nconst AddIssue = ({ addIssueOpen, setAddIssueOpen, addIssue, addOrUpdate, editInitVals, setEditInitVals }) => {\r\n\r\n  useEffect(() => {\r\n    setErrorCount(0);\r\n    return () => {\r\n      \r\n    }\r\n  }, [addIssueOpen])\r\n\r\n  const [errorCount, setErrorCount] = useState(0);\r\n\r\n  const onSubmit = (e) => {\r\n    // prevent page refresh\r\n    e.preventDefault();\r\n\r\n    // reset error count to zero then increment if either of the two require dfields are empty\r\n    setErrorCount(0);\r\n    if (editInitVals.title === \"\" && (editInitVals.accountNo === \"\" || editInitVals.accountNo.length < 5)) return setErrorCount(2);\r\n    if (editInitVals.title === \"\" || (editInitVals.accountNo === \"\" || editInitVals.accountNo.length < 5)) return setErrorCount(1);\r\n    setErrorCount(0);\r\n    \r\n    // add issue will add or update depending on the addOrUpdate value\r\n    addIssue();\r\n    \r\n    setAddIssueOpen(false);\r\n  }\r\n\r\n  return (\r\n    <Dialog open={addIssueOpen} title={addOrUpdate+\" GL Account\"}subtitle=\"Please enter GL account details\">\r\n    <Form stickyFooter={true} \r\n      onSubmit={onSubmit}\r\n      leftSideButtons={<Button onClick={() => setAddIssueOpen(!addIssueOpen)}>\r\n                        Cancel\r\n                      </Button>}\r\n       saveButton={<Button buttonType='primary' type=\"submit\">\r\n                    Save\r\n                  </Button>}\r\n      fieldSpacing={2}\r\n      errorCount={errorCount}\r\n    >\r\n      <AddIssueTextbox \r\n        text=\"Account No (minimum 5 characters)\"\r\n        fieldKey=\"accountNo\"\r\n        required=\"true\"\r\n        editInitVals={editInitVals}\r\n          setEditInitVals={setEditInitVals}\r\n          addOrUpdate={addOrUpdate}\r\n          \r\n      />\r\n      <AddIssueTextbox \r\n        text=\"Title\"\r\n        fieldKey=\"title\"\r\n        required=\"true\"\r\n        editInitVals={editInitVals}\r\n          setEditInitVals={setEditInitVals}\r\n          addOrUpdate={addOrUpdate} />\r\n        <Select\r\n          label=\"Account Type\"\r\n          onChange={(e) => setEditInitVals({ ...editInitVals, \"accountType\": e.target.value })}\r\n          value={editInitVals.accountType}\r\n        >\r\n          <Option text=\"balancesheet\" value=\"balancesheet\" />\r\n          <Option text=\"incomestatement\" value=\"incomestatement\" />\r\n        </Select>\r\n        <Select\r\n          label=\"Normal Balance\"\r\n          onChange={(e) => setEditInitVals({ ...editInitVals, \"normalBalance\": e.target.value })}\r\n          value={editInitVals.normalBalance}\r\n        >\r\n          <Option text=\"debit\" value=\"debit\" />\r\n          <Option text=\"credit\" value=\"credit\" />\r\n        </Select>\r\n    </Form>\r\n  </Dialog>\r\n  )\r\n}\r\n\r\nexport default AddIssue\r\n\r\n//   < AddIssueTextbox\r\n// text = \"Account Type\"\r\n// fieldKey = \"accountType\"\r\n// editInitVals = { editInitVals }\r\n// setEditInitVals = { setEditInitVals }\r\n// addOrUpdate = { addOrUpdate } />\r\n//   <AddIssueTextbox\r\n//     text=\"Normal Balance\"\r\n//     fieldKey=\"normalBalance\"\r\n//     editInitVals={editInitVals}\r\n//     setEditInitVals={setEditInitVals}\r\n//     addOrUpdate={addOrUpdate} />","import React from 'react'\r\n//import StyledButton from \"carbon-react/lib/components/button\"\r\nimport Toast from \"carbon-react/lib/components/toast\"\r\n//import actionPopoverMenuComponent from 'carbon-react/lib/components/action-popover/action-popover-menu.component'\r\n\r\nconst ToastPop = ({ toastMessage, toastOpen, setToastOpen, toastVariant }) => {\r\n\r\n  const onDismissClick = (e) => {\r\n    setToastOpen(false)\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Toast variant={toastVariant}\r\n        open={toastOpen} \r\n        onDismiss={onDismissClick}\r\n        timeout={2000}\r\n      >\r\n        {toastMessage}\r\n      </Toast>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToastPop\r\n","//import GlobalStyle from 'carbon-react/lib/style/global-style';\nimport \"./App.css\"\nimport React from 'react';\n//import { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\"\nimport { ThemeProvider } from \"styled-components\";\nimport mintTheme from \"carbon-react/lib/style/themes/mint\";\nimport AppWrapper from \"carbon-react/lib/components/app-wrapper\";\n\nimport IssueTable from \"./components/IssueTable.js\"\nimport NavBar from \"./components/NavBar.js\"\nimport AddIssue from \"./components/AddIssue.js\";\nimport ToastPop from \"./components/ToastPop.js\"\n\nfunction App() {\n\n  // the list of issues gottne from the database, used in issuetable\n const [issueList, setIssueList] = useState([])\n\n // the flag to determine whether the add issue form is opne, also used for updating\n const [addIssueOpen, setAddIssueOpen] = useState(false)\n\n // the flag to determine whether the \"x was successful\" toast appears\n  const [toastOpen, setToastOpen] = useState(false)\n  \n  const [toastVariant, setToastVariant] = useState(\"success\")\n\n // the var that passes the toast messsage from the add/edit/delete processes to the toast\n const [toastMessage, setToastMessage] = useState(\"\")\n\n // the flag that determines whether the \"add update\" screen will open in add or edit mode\n const [addOrUpdate, setAddOrUpdate] = useState(\"add\")\n\n // object to store the initial values for use when the edit option is launched.\n // also stores the id sent to the api\n const [editInitVals, setEditInitVals] = useState({\n   recordNo: \"\",\n   accountNo: \"\",\n   title: \"\",\n   accountType: \"\",\n   normalBalance: \"\"\n })\n\n  useEffect(() => {\n    getIssues()\n    return () => {\n      console.log(\"loaded\")\n    }\n  }, [])\n\n  // method for getting list of issues from API\n  const getIssues = async () => {\n    try {\n      const response = await fetch(\"/api/general\")\n      const data = await response.json()\n      \n      setIssueList(data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  // method for sending insert to API\n  const addIssue = async () => {\n\n    // build FormData from fields on the add issue dialog\n    let formData = new FormData()\n    formData.append(\"accountNo\", editInitVals.accountNo)\n    formData.append(\"title\", editInitVals.title)\n    formData.append(\"accountType\", editInitVals.accountType)\n    formData.append(\"normalBalance\", editInitVals.normalBalance)\n    // add id if it's an update\n    addOrUpdate === \"Update\" && formData.append(\"recordNo\", editInitVals.recordNo)\n    \n    //convert to search params for fetch\n    const body = new URLSearchParams(formData)\n\n    // set methdd according to whether it's an add or update\n    const method = addOrUpdate===\"Add\"? \"POST\":\"PUT\"\n\n    try {\n\n      const response = await fetch(\"/api/general/add\", { method, body })\n      console.log(response)\n      const data = await response.text()\n\n      if (data == \"ERROR\") {\n        throw console.error(\"Fail\");\n      }\n\n      console.log(data)\n\n      // refresh list\n      await getIssues();\n\n      setToastVariant(\"success\")\n\n      // update user via toast\n      if (addOrUpdate === \"Add\") {\n        setToastMessage(\"Account created successfully\")\n        \n      } else {\n        setToastMessage(\"Account updated successfully\")\n      }\n      setToastOpen(true)\n    } catch (error) {\n      setToastVariant(\"error\")\n      setToastMessage(\"Account creation failed, account already exists\")\n      setToastOpen(true)\n      console.log(error)\n    }\n  }\n\n  const deleteIssue = async (accountNo) => {\n    // build formdata using the id\n    let formData = new FormData()\n    formData.append(\"accountNo\",accountNo)\n\n    const body = new URLSearchParams(formData) \n\n    const response = await fetch(\"/api/general/delete\", {\n      method:\"DELETE\",\n      body })\n    const data = await response.json()\n    console.log(data)\n\n    // refresh list\n    await getIssues();\n\n    // update user via toast\n    setToastVariant(\"success\")\n    setToastMessage(\"Account deleted successfully\")\n    setToastOpen(true)\n\n\n\n  }\n\n  return (\n<ThemeProvider theme={mintTheme}>\n  <AppWrapper>\n    <NavBar \n      addIssueOpen={addIssueOpen} \n      setAddIssueOpen={setAddIssueOpen}\n      setAddOrUpdate={setAddOrUpdate}\n      setEditInitVals={setEditInitVals}/>\n    <IssueTable \n      issueList={issueList}\n      setAddIssueOpen={setAddIssueOpen}\n      setAddOrUpdate={setAddOrUpdate}\n      setEditInitVals={setEditInitVals}\n      deleteIssue={deleteIssue}/>\n    <AddIssue \n      addIssueOpen={addIssueOpen} \n      setAddIssueOpen={setAddIssueOpen}\n      addIssue={addIssue}\n      addOrUpdate={addOrUpdate}\n      editInitVals={editInitVals}\n      setEditInitVals={setEditInitVals}/>\n    <ToastPop \n      toastMessage={toastMessage}\n      toastOpen={toastOpen}\n      setToastOpen={setToastOpen}\n      toastVariant={toastVariant}\n    />\n  </AppWrapper>\n</ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}